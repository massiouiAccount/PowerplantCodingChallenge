namespace PowerplantCodingChallenge.WebApi.Services;

public class ProductionPlanService : IProductionPlanService
{
  public IReadOnlyList<CalculatePowerProductionPlanResponse> CalculateProduction(CalculatePowerProductionPlanRequest loadRequest)
  {
    double remainingLoadToProduce = loadRequest.LoadInMWh;
    PowerPlant[] sortedPowerPlants = 
      SortPowerPlantsByCostPerMWh(loadRequest.PowerPlants, loadRequest.Fuels);
    List<CalculatePowerProductionPlanResponse> productionPlan = [];

    foreach (var powerPlant in sortedPowerPlants)
    {
      double powerProducedByPlant =
          CalculatePowerForPlant(powerPlant, loadRequest.Fuels, remainingLoadToProduce);

      remainingLoadToProduce -= powerProducedByPlant;

      productionPlan.Add(new CalculatePowerProductionPlanResponse
      {
        PowerPlantName = powerPlant.Name,
        PowerProducedInMWh = Math.Round(powerProducedByPlant, 1)
      });

      if (remainingLoadToProduce <= 0) break;
    }

    // Append the rest of the plants with 0 power produced
    var plantsWithNoPowerProduced = sortedPowerPlants.Where(p => !productionPlan.Exists(pp => pp.PowerPlantName == p.Name));
    foreach (var powerPlant in plantsWithNoPowerProduced)
    {
      productionPlan.Add(new CalculatePowerProductionPlanResponse
      {
        PowerPlantName = powerPlant.Name,
        PowerProducedInMWh = default
      });
    }

    return productionPlan;
  }

  /// <summary>
  /// Sorts the power plants by their cost per MWh in ascending order. 
  /// The cost is calculated based on fuel prices and plant efficiency.
  /// </summary>
  /// <param name="powerPlants">An array of power plants to be sorted.</param>
  /// <param name="fuelCosts">The current fuel costs for Gas, Kerosine, and other fuels.</param>
  /// <returns>An array of power plants sorted by the cost of producing 1 MWh.</returns>
  private static PowerPlant[] SortPowerPlantsByCostPerMWh(PowerPlant[] powerPlants, Fuels fuelCosts)
  {
    // Order power plants by the calculated cost per MWh
    PowerPlant[] sortedByCost =
        [.. powerPlants.OrderBy(plant => CalculateProductionCostPerMWh(plant, fuelCosts))];

    return sortedByCost;
  }

  /// <summary>
  /// Calculates the cost of producing 1 MWh of electricity for a given power plant.
  /// The cost depends on the type of power plant, its efficiency, and the current fuel prices.
  /// </summary>
  /// <param name="powerPlant">The power plant for which to calculate the cost.</param>
  /// <param name="fuelCosts">The current fuel costs for Gas, Kerosine, etc.</param>
  /// <returns>The cost per MWh of electricity production.</returns>
  /// <exception cref="UnsupportedPowerPlantTypeException">
  /// Thrown when the power plant type is not supported.
  /// </exception>
  private static double CalculateProductionCostPerMWh(PowerPlant powerPlant, Fuels fuelCosts)
  {
    double unitsOfFuelRequired = CalculateRequiredUnitsOfFuel(powerPlant.Efficiency);

    return powerPlant.Type switch
    {
      PowerPlantType.WindTurbine => default,
      PowerPlantType.GasFired => unitsOfFuelRequired * fuelCosts.GasPriceInEuroPerMWh,
      PowerPlantType.TurboJet => unitsOfFuelRequired * fuelCosts.KerosinePriceInEuroPerMWh,
      _ => throw new UnsupportedPowerPlantTypeException(powerPlant.Type),
    };

    // Calculate the required units of fuel to produce 1 MWh of electricity based on efficiency
    static double CalculateRequiredUnitsOfFuel(double efficiency)
    {
      // Required units of fuel = 1 / efficiency
      // Example: If efficiency is 0.53, you need 1 / 0.53 units of fuel to produce 1 MWh
      return (ushort)Unit.One / efficiency;
    }
  }

  /// <summary>
  /// Calculates the amount of power that a specific power plant can generate.
  /// </summary>
  /// <param name="powerPlant">The power plant for which the power production is calculated.</param>
  /// <param name="fuelsCost">The current fuel costs and wind percentage affecting the power plant's operation.</param>
  /// <param name="remainingLoadToProduce">The amount of load that still needs to be produced.</param>
  /// <returns>The amount of power the plant can produce. Returns 0 if the plant cannot meet its minimum production requirement.</returns>
  private static double CalculatePowerForPlant(PowerPlant powerPlant, Fuels fuelsCost, double remainingLoadToProduce)
  {
    if (powerPlant.Type == PowerPlantType.WindTurbine)
    {
      // Calculate power generated by wind turbines based on wind percentage
      double powerFromWindTurbine = powerPlant.MaximumPowerOutput * (fuelsCost.WindPercentage / 100);
      return powerFromWindTurbine;
    }

    // For other types of plants, calculate the power they can produce given the remaining load
    double powerFromPlant = Math.Min(powerPlant.MaximumPowerOutput, remainingLoadToProduce);

    // Check if the plant can meet its minimum production requirement
    bool isPlantCapableOfMinimumPower = powerFromPlant >= powerPlant.MinimumPowerOutput;

    if (!isPlantCapableOfMinimumPower) return default;

    return powerFromPlant;
  }
}
